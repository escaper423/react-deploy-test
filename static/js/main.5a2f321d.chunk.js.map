{"version":3,"sources":["CreateTask.js","TodoHeader.js","App.js","TodoList.js","TodoBody.js","reportWebVitals.js","index.js"],"names":["CreateTask","theme","opened","setOpened","inputText","setInputText","todoList","setTodoList","modalPortal","document","getElementById","modalStyle","backgroundColor","color","borderRadius","position","margin","top","left","padding","width","display","transform","zIndex","ReactDOM","createPortal","id","onClick","className","style","size","type","value","placeholder","onChange","e","target","warning","getElementsByClassName","innerHTML","newVal","title","items","todo","v4","name","TodoHeader","useState","GetTheme","themeUpdate","useContext","ThemeUpdateContext","daynight","headerStyle","height","textAlign","Provider","TodoList","listStyle","onDragEnd","destination","source","console","log","index","droppableId","tmp","prev","splice","_","map","data","key","provided","snapshot","ref","innerRef","droppableProps","el","draggableId","draggableProps","isDragging","dragHandleProps","textOverflow","filter","item","DeleteList","TodoBody","bodyStyle","ThemeContext","React","createContext","App","darkTheme","setDarkTheme","prevDarkTheme","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","render","StrictMode"],"mappings":"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","file":"static/js/main.5a2f321d.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './CreateTask.css';\r\nimport { BsX } from \"react-icons/bs\";\r\nimport {v4} from 'uuid';\r\n\r\nexport default function CreateTask({ \r\n    theme, opened, setOpened, \r\n    inputText, setInputText,\r\n    todoList, setTodoList\r\n}) {\r\n    const modalPortal = document.getElementById(\"modal-portal\");\r\n    const modalStyle = {\r\n        backgroundColor: theme ? '#555' : '#aaa',\r\n        color: theme ? '#ccc' : '#333',\r\n        borderRadius: '8px',\r\n        position: 'absolute',\r\n        margin: 'auto',\r\n        top: '20%',\r\n        left: '50%',\r\n        padding: '2rem',\r\n        width: '30vw',\r\n        display: 'block',\r\n        transform: 'translateX(-50%)',\r\n        zIndex: 1000\r\n    };\r\n\r\n    function CreateTodoList() {\r\n        let warning = document.getElementsByClassName('create-task-container-cannot-text')[0];\r\n\r\n        if(inputText){\r\n            warning.innerHTML = \"\";\r\n            const newVal = {\r\n                ...todoList,\r\n                \"todo\": {\r\n                    title: \"Todo\",\r\n                    items: [\r\n                        ...todoList.todo.items,\r\n                        {\r\n                            id: v4(),\r\n                            name: inputText\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n            setInputText(\"\");\r\n            return setTodoList(newVal);\r\n        }\r\n        \r\n        \r\n        warning.innerHTML = \"Content text is required.\";\r\n        return null;\r\n    }\r\n\r\n    if (opened) {\r\n        return (\r\n            ReactDOM.createPortal(\r\n                <>\r\n                    <div id=\"create-task-modal\" onClick={() => setOpened(false)}></div>\r\n                    <div className=\"create-task-container\" style={modalStyle}>\r\n                        <BsX className='create-task-container-close' onClick = {()=>setOpened(false)} size='2rem'></BsX>\r\n                        <h2>Create Task</h2><br></br>\r\n                        <hr></hr>\r\n                        <h3>Content:</h3>\r\n                        <input type=\"text\" value={inputText} placeholder=\"type here\" className=\"create-task-container-title\" onChange={(e) => setInputText(e.target.value)}></input>\r\n                        <p className=\"create-task-container-cannot-text\"></p>\r\n                        <button className='create-task-container-confirm' onClick={CreateTodoList}>Create</button>\r\n                    </div>\r\n                </>\r\n\r\n                , modalPortal)\r\n        );\r\n    }\r\n    return null;\r\n};","import React, { useState } from 'react';\r\nimport './TodoHeader.css';\r\nimport { IconContext } from 'react-icons';\r\nimport { GoEye } from \"react-icons/go\";\r\nimport CreateTask from './CreateTask';\r\n\r\nimport { GetTheme, GetUpdateTheme } from './App';\r\n\r\nexport default function TodoHeader({ todoList, setTodoList, inputText, setInputText }) {\r\n    const [opened, setOpened] = useState(false);\r\n    const theme = GetTheme();\r\n    const themeUpdate = GetUpdateTheme();\r\n    const daynight = theme ? 'Day' : 'Night';\r\n    const headerStyle = {\r\n        display: 'inline-block',\r\n        backgroundColor: theme ? '#333' : '#eee',\r\n        color: theme ? '#ccc' : '#333',\r\n        width: '100vw',\r\n        height: '30vh',\r\n        textAlign: 'center',\r\n        padding: '20px',\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <CreateTask\r\n                opened={opened} theme={theme} setOpened={setOpened}\r\n                inputText={inputText} setInputText={setInputText}\r\n                todoList={todoList} setTodoList={setTodoList}\r\n            />\r\n            <div className=\"todo-header\" style={headerStyle}>\r\n                <IconContext.Provider value={{ size: \"2rem\" }}>\r\n                    <nav className=\"todo-header-navbar\">\r\n                        <GoEye onClick={themeUpdate}></GoEye><p>{daynight} Mode</p>\r\n                    </nav>\r\n                </IconContext.Provider>\r\n                <div className=\"todo-header-container\">\r\n                    <h1>Trolling List</h1>\r\n                    <p className=\"textxt\">\"Lorem ipsum dolor sit amet, consectetur adipiscing elit...\"</p>\r\n                    <button className=\"todo-header-btn\" onClick={() => setOpened(true)}>Create Task Group</button>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}","import React, { useState, useContext } from 'react';\nimport './App.css';\nimport TodoHeader from './TodoHeader.js';\nimport TodoBody from './TodoBody.js';\nimport CreateTask from './CreateTask.js';\nimport { v4 } from \"uuid\";\nconst ThemeContext = React.createContext();\nconst ThemeUpdateContext = React.createContext();\n\nexport function GetTheme() {\n  return useContext(ThemeContext);\n}\n\nexport function GetUpdateTheme() {\n  return useContext(ThemeUpdateContext);\n}\n\nexport default function App() {\n  const [inputText, setInputText] = useState(\"\");\n  const [todoList, setTodoList] = useState({\n    \"todo\": {\n        title: \"Todo\",\n        items: []\n    },\n    \"in-progress\": {\n        title: \"In Progress\",\n        items: []\n    },\n    \"completed\": {\n        title: \"Completed\",\n        items: []\n    }\n});\n  const [darkTheme, setDarkTheme] = useState(true);\n\n  function ToggleTheme() {\n    setDarkTheme(prevDarkTheme => !prevDarkTheme);\n  }\n  return (\n    <>\n      <div id=\"app\">\n        <ThemeContext.Provider value={darkTheme}>\n          <ThemeUpdateContext.Provider value={ToggleTheme} >\n            <CreateTask theme={GetTheme}/>\n            <TodoHeader todoList = {todoList} setTodoList = {setTodoList} inputText = {inputText} setInputText = {setInputText} />\n            <TodoBody todoList = {todoList} setTodoList = {setTodoList}/>\n          </ThemeUpdateContext.Provider>\n        </ThemeContext.Provider>\n      </div>\n    </>\n  );\n}","import React, { useState } from 'react';\r\nimport { GetTheme } from './App';\r\nimport './TodoBody.css';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport _ from \"lodash\";\r\nimport { BsEye, BsX } from \"react-icons/bs\";\r\n\r\nfunction TodoList({todoList, setTodoList}) {\r\n\r\n    //couldnt change parameters' name ('destination, source')\r\n    const hDragEnd = ({destination,source}) => {\r\n        console.log(destination);\r\n        console.log(source);\r\n        if (!destination){\r\n            return;\r\n        }\r\n        \r\n        if (destination.index === source.index && destination.droppableId === source.droppableId){\r\n            return;\r\n        }\r\n\r\n        const tmp = {...todoList[source.droppableId].items[source.index]};\r\n        setTodoList(prev =>{\r\n            prev = {...prev}\r\n            prev[source.droppableId].items.splice(source.index, 1);\r\n            prev[destination.droppableId].items.splice(destination.index,0,tmp);\r\n            return prev;\r\n        })\r\n    }\r\n\r\n    const DeleteList = (key,id) => {\r\n        console.log(\"clicked\");\r\n        setTodoList(prev => {\r\n            prev = {...prev}\r\n            prev[key].items = prev[key].items.filter(item => item.id != id);\r\n            return prev;\r\n        })\r\n    }\r\n\r\n    const theme = GetTheme();\r\n    const listStyle = {\r\n        width: '20%',\r\n        height: '30%',\r\n        backgroundColor: theme ? '#555' : '#ccc',\r\n        color: theme ? '#ccc' : '#555',\r\n        borderRadius: '6px',\r\n        padding: '1rem'\r\n    }\r\n\r\n    return (\r\n        <div className=\"todo-list-container\">\r\n            <DragDropContext onDragEnd={hDragEnd}>\r\n                {_.map(todoList, (data, key) => {\r\n                    return (\r\n                        <div key={key} className={\"todo-list\"} style={listStyle}>\r\n                            <h3>{data.title}</h3>\r\n                            <hr></hr>\r\n                            <Droppable droppableId={key}>\r\n                                {(provided, snapshot) => {\r\n                                    return (\r\n                                        <div\r\n                                            ref={provided.innerRef}\r\n                                            {...provided.droppableProps}\r\n                                            className={\"todo-list-column\"}\r\n                                        >\r\n                                            {data.items.map((el, index) => {\r\n                                                console.log(el.id);\r\n                                                return (\r\n                                                    <Draggable key={el.id} index={index} draggableId={el.id}>\r\n                                                        {(provided, snapshot) => {\r\n                                                            console.log(snapshot);\r\n                                                            return (\r\n                                                                <div\r\n                                                                    ref={provided.innerRef}\r\n                                                                    {...provided.draggableProps}\r\n                                                                    className={`todo-list-item ${snapshot.isDragging && \"dragging\"}`}\r\n                                                        \r\n                                                                >\r\n                                                                    <span {...provided.dragHandleProps} style={{margin:'auto', width:'80%', textOverflow:'ellipsis'}}>{el.name}</span>\r\n                                                                    <BsX className=\"todo-list-item-delete\" onClick={() => DeleteList(key,el.id)} ></BsX>\r\n\r\n                                                                </div>\r\n                                                            )\r\n                                                        }}\r\n                                                    </Draggable>\r\n                                                )\r\n                                            })}\r\n                                            {provided.placeholder}\r\n                                        </div>\r\n                                    )\r\n                                }}\r\n                            </Droppable>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </DragDropContext>\r\n        </div>\r\n    );\r\n}\r\nexport default TodoList;\r\n","import React from 'react';\r\nimport './TodoBody.css';\r\nimport TodoList from './TodoList';\r\nimport { GetTheme } from './App';\r\n\r\nexport default function TodoBody({todoList, setTodoList}) {\r\n    const theme = GetTheme();\r\n\r\n    const bodyStyle = {\r\n        backgroundColor: theme ? '#333' : '#eee',\r\n        color: theme ? '#eee' : '333',\r\n        width: '100vw',\r\n        height: '70vh',\r\n        textAlign: 'center'\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div id='todo-body' style={bodyStyle}>\r\n                <TodoList todoList = {todoList} setTodoList = {setTodoList}/>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}