{"version":3,"sources":["CreateTask.js","TodoHeader.js","App.js","MediaQuery.js","TodoList.js","TodoBody.js","reportWebVitals.js","index.js"],"names":["CreateTask","theme","opened","setOpened","inputText","setInputText","todoList","setTodoList","modalPortal","document","getElementById","modalStyle","backgroundColor","color","borderRadius","position","margin","top","left","padding","width","Math","min","display","transform","zIndex","ReactDOM","createPortal","id","onClick","className","style","size","type","value","placeholder","onChange","e","target","warning","getElementsByClassName","innerHTML","newVal","title","items","todo","v4","name","TodoHeader","useState","GetTheme","themeUpdate","useContext","ThemeUpdateContext","daynight","headerStyle","height","textAlign","Provider","MediaQuery","query","matches","setMatches","useEffect","media","window","matchMedia","listener","addListener","removeListener","TodoList","isSmallScreen","listStyle","onDragEnd","destination","source","console","log","index","droppableId","tmp","prev","splice","_","map","data","key","provided","snapshot","ref","innerRef","droppableProps","el","draggableId","draggableProps","isDragging","dragHandleProps","textOverflow","filter","item","DeleteList","TodoBody","bodyStyle","ThemeContext","React","createContext","App","darkTheme","setDarkTheme","prevDarkTheme","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","render","StrictMode"],"mappings":"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","file":"static/js/main.2ac4b490.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './CreateTask.css';\r\nimport { BsX } from \"react-icons/bs\";\r\nimport {v4} from 'uuid';\r\n\r\nexport default function CreateTask({ \r\n    theme, opened, setOpened, \r\n    inputText, setInputText,\r\n    todoList, setTodoList\r\n}) {\r\n    const modalPortal = document.getElementById(\"modal-portal\");\r\n    \r\n    const modalStyle = {\r\n        backgroundColor: theme ? '#555' : '#aaa',\r\n        color: theme ? '#ccc' : '#333',\r\n        borderRadius: '8px',\r\n        position: 'absolute',\r\n        margin: 'auto',\r\n        top: '20%',\r\n        left: '50%',\r\n        padding: '2rem',\r\n        width: Math.min('30vw', '300px'),\r\n        display: 'block',\r\n        transform: 'translateX(-50%)',\r\n        zIndex: 1000\r\n    };\r\n\r\n    function CreateTodoList() {\r\n        let warning = document.getElementsByClassName('create-task-container-cannot-text')[0];\r\n\r\n        if(inputText){\r\n            warning.innerHTML = \"\";\r\n            const newVal = {\r\n                ...todoList,\r\n                \"todo\": {\r\n                    title: \"Todo\",\r\n                    items: [\r\n                        ...todoList.todo.items,\r\n                        {\r\n                            id: v4(),\r\n                            name: inputText\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n            setInputText(\"\");\r\n            return setTodoList(newVal);\r\n        }\r\n        \r\n        \r\n        warning.innerHTML = \"Content text is required.\";\r\n        return null;\r\n    }\r\n\r\n    if (opened) {\r\n        return (\r\n            ReactDOM.createPortal(\r\n                <>\r\n                    <div id=\"create-task-modal\" onClick={() => setOpened(false)}></div>\r\n                    <div className=\"create-task-container\" style={modalStyle}>\r\n                        <BsX className='create-task-container-close' onClick = {()=>setOpened(false)} size='2rem'></BsX>\r\n                        <h2>Create Task</h2><br></br>\r\n                        <hr></hr>\r\n                        <h3>Content:</h3>\r\n                        <input type=\"text\" value={inputText} placeholder=\"type here\" className=\"create-task-container-title\" onChange={(e) => setInputText(e.target.value)}></input>\r\n                        <p className=\"create-task-container-cannot-text\"></p>\r\n                        <button className='create-task-container-confirm' onClick={CreateTodoList}>Create</button>\r\n                    </div>\r\n                </>\r\n\r\n                , modalPortal)\r\n        );\r\n    }\r\n    return null;\r\n};","import React, { useState } from 'react';\r\nimport './TodoHeader.css';\r\nimport { IconContext } from 'react-icons';\r\nimport { GoEye } from \"react-icons/go\";\r\nimport CreateTask from './CreateTask';\r\n\r\nimport { GetTheme, GetUpdateTheme } from './App';\r\n\r\nexport default function TodoHeader({ todoList, setTodoList, inputText, setInputText }) {\r\n    const [opened, setOpened] = useState(false);\r\n    const theme = GetTheme();\r\n    const themeUpdate = GetUpdateTheme();\r\n    const daynight = theme ? 'Day' : 'Night';\r\n    const headerStyle = {\r\n        display: 'inline-block',\r\n        backgroundColor: theme ? '#333' : '#eee',\r\n        color: theme ? '#ccc' : '#333',\r\n        width: '100vw',\r\n        height: '30vh',\r\n        textAlign: 'center',\r\n        padding: '20px',\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <CreateTask\r\n                opened={opened} theme={theme} setOpened={setOpened}\r\n                inputText={inputText} setInputText={setInputText}\r\n                todoList={todoList} setTodoList={setTodoList}\r\n            />\r\n            <div className=\"todo-header\" style={headerStyle}>\r\n                <IconContext.Provider value={{ size: \"2rem\" }}>\r\n                    <nav className=\"todo-header-navbar\">\r\n                        <GoEye onClick={themeUpdate}></GoEye><p>{daynight} Mode</p>\r\n                    </nav>\r\n                </IconContext.Provider>\r\n                <div className=\"todo-header-container\">\r\n                    <h1>Todo List Tutorial</h1>\r\n                    <p className=\"textxt\">Press 'Create Task' to add a todo task</p>\r\n                    <button className=\"todo-header-btn\" onClick={() => setOpened(true)}>Create Task</button>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}","import React, { useState, useContext } from 'react';\nimport './App.css';\nimport TodoHeader from './TodoHeader.js';\nimport TodoBody from './TodoBody.js';\nimport CreateTask from './CreateTask.js';\n\nconst ThemeContext = React.createContext();\nconst ThemeUpdateContext = React.createContext();\n\nexport function GetTheme() {\n  return useContext(ThemeContext);\n}\n\nexport function GetUpdateTheme() {\n  return useContext(ThemeUpdateContext);\n}\n\nexport default function App() {\n  const [inputText, setInputText] = useState(\"\");\n  const [todoList, setTodoList] = useState({\n    \"todo\": {\n        title: \"Todo\",\n        items: []\n    },\n    \"in-progress\": {\n        title: \"In Progress\",\n        items: []\n    },\n    \"completed\": {\n        title: \"Completed\",\n        items: []\n    }\n});\n  const [darkTheme, setDarkTheme] = useState(true);\n\n  function ToggleTheme() {\n    setDarkTheme(prevDarkTheme => !prevDarkTheme);\n  }\n  return (\n    <>\n      <div id=\"app\">\n        <ThemeContext.Provider value={darkTheme}>\n          <ThemeUpdateContext.Provider value={ToggleTheme} >\n            <CreateTask theme={GetTheme}/>\n            <TodoHeader todoList = {todoList} setTodoList = {setTodoList} inputText = {inputText} setInputText = {setInputText} />\n            <TodoBody todoList = {todoList} setTodoList = {setTodoList}/>\n          </ThemeUpdateContext.Provider>\n        </ThemeContext.Provider>\n      </div>\n    </>\n  );\n}","import {useState, useEffect} from 'react';\r\n\r\nfunction MediaQuery(query) {\r\n    const [matches, setMatches] = useState(false);\r\n    \r\n    useEffect(() => {\r\n        const media = window.matchMedia(query);\r\n        if (media.matches !== matches){\r\n            setMatches(media.matches);\r\n        }\r\n\r\n        const listener = () => {\r\n            setMatches(media.matches);\r\n        }\r\n\r\n        media.addListener(listener);\r\n        return () => media.removeListener(listener);\r\n        \r\n    }, [matches,query]);\r\n\r\n    return matches;\r\n}\r\n\r\nexport default MediaQuery;\r\n","import React from 'react';\r\nimport { GetTheme } from './App';\r\nimport './TodoBody.css';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport _ from \"lodash\";\r\nimport { BsX } from \"react-icons/bs\";\r\nimport MediaQuery from './MediaQuery';\r\n\r\nfunction TodoList({todoList, setTodoList}) {\r\n\r\n    //couldnt change parameters' name ('destination, source')\r\n    const hDragEnd = ({destination,source}) => {\r\n        console.log(destination);\r\n        console.log(source);\r\n        if (!destination){\r\n            return;\r\n        }\r\n        \r\n        if (destination.index === source.index && destination.droppableId === source.droppableId){\r\n            return;\r\n        }\r\n\r\n        const tmp = {...todoList[source.droppableId].items[source.index]};\r\n        setTodoList(prev =>{\r\n            prev = {...prev}\r\n            prev[source.droppableId].items.splice(source.index, 1);\r\n            prev[destination.droppableId].items.splice(destination.index,0,tmp);\r\n            return prev;\r\n        })\r\n    }\r\n\r\n    const DeleteList = (key,id) => {\r\n        console.log(\"clicked\");\r\n        setTodoList(prev => {\r\n            prev = {...prev}\r\n            prev[key].items = prev[key].items.filter(item => item.id !== id);\r\n            return prev;\r\n        })\r\n    }\r\n    const isSmallScreen = MediaQuery('(max-width: 800px)');\r\n    const theme = GetTheme();\r\n    const listStyle = {\r\n        width: isSmallScreen?'95%':'25%',\r\n        display: isSmallScreen? 'block': 'inline-block',\r\n        margin: isSmallScreen? '10px':'0',\r\n        height: '30%',\r\n        backgroundColor: theme ? '#555' : '#ccc',\r\n        color: theme ? '#ccc' : '#555',\r\n        borderRadius: '6px',\r\n        padding: '1rem'\r\n    }\r\n\r\n    return (\r\n        <div className=\"todo-list-container\">\r\n            <DragDropContext onDragEnd={hDragEnd}>\r\n                {_.map(todoList, (data, key) => {\r\n                    return (\r\n                        <div key={key} className={\"todo-list\"} style={listStyle}>\r\n                            <h3>{data.title}</h3>\r\n                            <hr></hr>\r\n                            <Droppable droppableId={key}>\r\n                                {(provided, snapshot) => {\r\n                                    return (\r\n                                        <div\r\n                                            ref={provided.innerRef}\r\n                                            {...provided.droppableProps}\r\n                                            className={\"todo-list-column\"}\r\n                                        >\r\n                                            {data.items.map((el, index) => {\r\n                                                console.log(el.id);\r\n                                                return (\r\n                                                    <Draggable key={el.id} index={index} draggableId={el.id}>\r\n                                                        {(provided, snapshot) => {\r\n                                                            console.log(snapshot);\r\n                                                            return (\r\n                                                                <div\r\n                                                                    ref={provided.innerRef}\r\n                                                                    {...provided.draggableProps}\r\n                                                                    className={`todo-list-item ${snapshot.isDragging && \"dragging\"}`}\r\n                                                        \r\n                                                                >\r\n                                                                    <span {...provided.dragHandleProps} style={{margin:'auto', width:'80%', textOverflow:'ellipsis'}}>{el.name}</span>\r\n                                                                    <BsX className=\"todo-list-item-delete\" onClick={() => DeleteList(key,el.id)} ></BsX>\r\n\r\n                                                                </div>\r\n                                                            )\r\n                                                        }}\r\n                                                    </Draggable>\r\n                                                )\r\n                                            })}\r\n                                            {provided.placeholder}\r\n                                        </div>\r\n                                    )\r\n                                }}\r\n                            </Droppable>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </DragDropContext>\r\n        </div>\r\n    );\r\n}\r\nexport default TodoList;\r\n","import React from 'react';\r\nimport './TodoBody.css';\r\nimport TodoList from './TodoList';\r\nimport { GetTheme } from './App';\r\n\r\nexport default function TodoBody({todoList, setTodoList}) {\r\n    const theme = GetTheme();\r\n\r\n    const bodyStyle = {\r\n        backgroundColor: theme ? '#333' : '#eee',\r\n        color: theme ? '#eee' : '333',\r\n        width: '100vw',\r\n        height: '70vh',\r\n        textAlign: 'center'\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div id='todo-body' style={bodyStyle}>\r\n                <TodoList todoList = {todoList} setTodoList = {setTodoList}/>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}